version: "3.9"

services:
  # React App
  react-app:
    build:
      context: ./FrontEnd # Ensure this matches the Dockerfile location for your React app
      dockerfile: Dockerfile
    container_name: react-app
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://localhost:8080
    networks:
      - my-network
    depends_on:
      - backend
    ports:
      - "3000:80" # Maps port 3000 of the host to port 80 of the container

  # Nginx to serve the React App
  nginx:
    image: nginx:alpine
    container_name: nginx-server
    depends_on:
      - react-app
    volumes:
      - ./FrontEnd/nginx.conf:/etc/nginx/conf.d/default.conf # Nginx config
      - ./FrontEnd/dist:/usr/share/nginx/html # Ensure this matches the output folder
    networks:
      - my-network
    ports:
      - "80:80" # Maps host port 80 to container's port 80

  # MySQL Database
  mysql:
    image: mysql:latest
    container_name: MySQL-Container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: testecommerce
      MYSQL_USER: root
      MYSQL_PASSWORD: root
    ports:
      - "3307:3306" # Exposes MySQL on port 3307 of the host
    volumes:
      - mysql-data:/var/lib/mysql # Persistent storage for MySQL data
    networks:
      - my-network

  # Spring Boot Backend
  backend:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile
    container_name: BackEnd-App
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: jdbc:mysql://mysql:3306/testecommerce
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      BASE_PATH: /api
      PORT_NUMBER: 8000
      CORS_ALLOWED_ORIGINS: http://localhost:5173,http://172.31.96.1:5173,http://192.168.29.204:5173,http://192.168.29.204:3000,http://localhost:3000
    depends_on:
      - mysql
    ports:
      - "8000:8000"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mysql-data:
