/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserAddressImport } from './routes/user/address'
import { Route as AuthenticationRegisterImport } from './routes/authentication/register'
import { Route as AuthenticationLoginImport } from './routes/authentication/login'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const UserProfileLazyImport = createFileRoute('/user/profile')()
const UserCartLazyImport = createFileRoute('/user/cart')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserProfileLazyRoute = UserProfileLazyImport.update({
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/profile.lazy').then((d) => d.Route))

const UserCartLazyRoute = UserCartLazyImport.update({
  path: '/user/cart',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/cart.lazy').then((d) => d.Route))

const UserAddressRoute = UserAddressImport.update({
  path: '/user/address',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationRegisterRoute = AuthenticationRegisterImport.update({
  path: '/authentication/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationLoginRoute = AuthenticationLoginImport.update({
  path: '/authentication/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/authentication/login': {
      id: '/authentication/login'
      path: '/authentication/login'
      fullPath: '/authentication/login'
      preLoaderRoute: typeof AuthenticationLoginImport
      parentRoute: typeof rootRoute
    }
    '/authentication/register': {
      id: '/authentication/register'
      path: '/authentication/register'
      fullPath: '/authentication/register'
      preLoaderRoute: typeof AuthenticationRegisterImport
      parentRoute: typeof rootRoute
    }
    '/user/address': {
      id: '/user/address'
      path: '/user/address'
      fullPath: '/user/address'
      preLoaderRoute: typeof UserAddressImport
      parentRoute: typeof rootRoute
    }
    '/user/cart': {
      id: '/user/cart'
      path: '/user/cart'
      fullPath: '/user/cart'
      preLoaderRoute: typeof UserCartLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/authentication/login': typeof AuthenticationLoginRoute
  '/authentication/register': typeof AuthenticationRegisterRoute
  '/user/address': typeof UserAddressRoute
  '/user/cart': typeof UserCartLazyRoute
  '/user/profile': typeof UserProfileLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/authentication/login': typeof AuthenticationLoginRoute
  '/authentication/register': typeof AuthenticationRegisterRoute
  '/user/address': typeof UserAddressRoute
  '/user/cart': typeof UserCartLazyRoute
  '/user/profile': typeof UserProfileLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/authentication/login': typeof AuthenticationLoginRoute
  '/authentication/register': typeof AuthenticationRegisterRoute
  '/user/address': typeof UserAddressRoute
  '/user/cart': typeof UserCartLazyRoute
  '/user/profile': typeof UserProfileLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authentication/login'
    | '/authentication/register'
    | '/user/address'
    | '/user/cart'
    | '/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/authentication/login'
    | '/authentication/register'
    | '/user/address'
    | '/user/cart'
    | '/user/profile'
  id:
    | '__root__'
    | '/'
    | '/authentication/login'
    | '/authentication/register'
    | '/user/address'
    | '/user/cart'
    | '/user/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthenticationLoginRoute: typeof AuthenticationLoginRoute
  AuthenticationRegisterRoute: typeof AuthenticationRegisterRoute
  UserAddressRoute: typeof UserAddressRoute
  UserCartLazyRoute: typeof UserCartLazyRoute
  UserProfileLazyRoute: typeof UserProfileLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthenticationLoginRoute: AuthenticationLoginRoute,
  AuthenticationRegisterRoute: AuthenticationRegisterRoute,
  UserAddressRoute: UserAddressRoute,
  UserCartLazyRoute: UserCartLazyRoute,
  UserProfileLazyRoute: UserProfileLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authentication/login",
        "/authentication/register",
        "/user/address",
        "/user/cart",
        "/user/profile"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/authentication/login": {
      "filePath": "authentication/login.tsx"
    },
    "/authentication/register": {
      "filePath": "authentication/register.tsx"
    },
    "/user/address": {
      "filePath": "user/address.tsx"
    },
    "/user/cart": {
      "filePath": "user/cart.lazy.tsx"
    },
    "/user/profile": {
      "filePath": "user/profile.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
